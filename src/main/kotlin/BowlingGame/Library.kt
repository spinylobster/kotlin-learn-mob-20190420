/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package BowlingGame

data class Version(val major: Int, val minor: Int, val patch: Int) {

    init {
        require(major >= 0) {"major version は正の整数でなければならない"}
        require(minor >= 0) {"minor version は正の整数でなければならない"}
        require(patch >= 0) {"patch version は正の整数でなければならない"}
    }
    
    override fun toString() = "${major}.${minor}.${patch}"
    // ※型推論はしすぎると分かりづらくなるので、型の明示をする規約を作っている会社もあります

    fun patchVersionUp(): Version = copy(patch = patch + 1)
    fun minorVersionUp(): Version = copy(minor = minor + 1, patch = 0)
    fun majorVersionUp(): Version = copy(major = major + 1, minor = 0, patch = 0)

    operator fun plus(num: Int) = copy(patch = patch + num)

    // operator fun compareTo(other: Version) : Int = when {
    //     major == other.major && minor == other.minor -> patch.compareTo(other.patch)
    //     major == other.major -> minor.compareTo(other.minor)
    //     else -> major.compareTo(other.major)
    // }

    operator fun compareTo(other: Version) : Int = when {
        // メジャー　→　マイナー　→　パッチ　の順番で比較する
        major < other.major -> -1
        major > other.major -> 1

        // マイナーバージョンの大小が優先
        minor < other.minor -> -1
        minor > other.minor -> 1

        // パッチバージョンを比較する
        patch < other.patch -> -1
        patch > other.patch -> 1
        else -> 0
    }

    // operator fun compareTo(other: Version) : Int {
    //     return if (this.patch < other.patch) {
    //         -1
    //     }
    //     else if (this.patch > other.patch) {
    //         1
    //     } 
    //     else{
    //         0
    //     }
    // }
}
